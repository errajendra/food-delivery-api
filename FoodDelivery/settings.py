"""
Django settings for FoodDelivery project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^45&b#z8sh=t_imy4yri%@xzpnobhr$ekhu8+&#@5e$811b@2z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'ckeditor',
    'user.apps.UserConfig',
    'meal',
    'constance',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],
    
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'user.custom_auth.CustomAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    
    'DEFAULT_PAGINATION_CLASS': 'pagination.CustumPageNumberPagination',
    'PAGE_SIZE': 10
}

ROOT_URLCONF = 'FoodDelivery.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join('templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FoodDelivery.wsgi.application'

AUTH_USER_MODEL = 'user.CustomUser'


# Django Cron Integration
# https://pypi.org/project/django-crontab/

CRONJOBS = [
    # ('*/2 * * * *', 'user.cron.send_notification_job', '>> /home/ubuntu/project/food-delivery/cron_log.log >2&1'), # each 2 minutes
    ('30 19 * * *', 'user.cron.send_notification_morning_job', '>> /home/ubuntu/project/food-delivery/cron_log.log >2&1'), #at 7:30 PM
    ('0 8 * * *', 'user.cron.send_notification_noon_job', '>> /home/ubuntu/project/food-delivery/cron_log.log >2&1'), # at 8 AM
    ('30 13 * * *', 'user.cron.send_notification_evenning_job', '>> /home/ubuntu/project/food-delivery/cron_log.log >2&1'), # at 1:30 PM
]

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # Posgres Configration
   'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get("DB_NAME"),
        'USER': os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
    }
}

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

# https://django-constance.readthedocs.io/en/latest/
CONSTANCE_CONFIG = {
    'SERVICEABLE_AREA_ZIPCODE': ("560076,560068", 'Enter comman separated zip codes of your serviceable area'),
}
CONSTANCE_CONFIG_FIELDSETS = {
    'General Options': ('SERVICEABLE_AREA_ZIPCODE',),
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOGIN_URL = "/user/login/"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
PROJECT_ROOT=os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT=os.path.join(BASE_DIR,'collected_static')

# Base url to serve media files
MEDIA_URL = 'media/'

# Path where media is stored'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Configration Credentials
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")


# CC Avenue Configration Keys

CC_A_ACCESS_CODE =  os.environ.get("CC_A_ACCESS_CODE")
CC_A_WORKING_KEY =  os.environ.get("CC_A_WORKING_KEY")
CC_A_MERCHANT_ID =  os.environ.get("CC_A_MERCHANT_ID")
CC_A_CURRENCY = "INR"

RAZOR_PAY_MURCHENT_ID =  os.environ.get("RAZOR_PAY_MURCHENT_ID")
RAZOR_PAY_API_KEY =  os.environ.get("RAZOR_PAY_API_KEY")
RAZOR_PAY_API_SECRET =  os.environ.get("RAZOR_PAY_API_SECRET")
RAZOR_PAY_APP_TITLE =  os.environ.get("RAZOR_PAY_APP_TITLE")

ALLOWED_SERVICE_AREA_ZIP_CODES = os.environ.get("ALLOWED_SERVICE_AREA_ZIP_CODES")
